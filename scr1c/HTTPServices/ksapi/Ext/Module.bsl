	 	 
	 
	 
Функция получитьТокен(Пользователь,Пароль)
	
	Ответ = Новый Структура("error, accessToken, refreshToken");
	
	текКонтрагент = Справочники.Контрагенты.НайтиКонтрагентаПоемайл(Пользователь,Пароль); 
	Если текКонтрагент = Неопределено ТОгда
		ответ.error = "Контрагент не найден";
		Возврат Ответ;
	КонецесЛИ;
	
	
	АлгоритмПодписи = АлгоритмПодписиТокенаДоступа.HS256;  
	Сервис = "ksapi";    
	//Пользователь = "nvds@mail.ru"; 
	
	ТокенДоступа = Новый ТокенДоступа;
	
	ТокенДоступа.Заголовки.Вставить("alg", Строка(АлгоритмПодписи));  
	
	ТокенДоступа.Эмитент = "ssl";  
	КлючПодписи = пароль;//"0KHQuNC60YDQtdGC0L3Ri9C5INC60LvRjtGH0Yw=";

    //ТокенДоступа.Получатели.Добавить("testservis"); // вот так указано в примерах в документации - работать не будет. 
    МассивПолучателей = Новый Массив; //Сервис
	МассивПолучателей.Добавить(Сервис); //МассивПолучателей.Добавить("dataServiceBuy"); // имя http-сервиса из default.vrd
	
    ТокенДоступа.Получатели = МассивПолучателей;
	
	ТокенДоступа.КлючСопоставленияПользователя = Пользователь; // "service"; // имя пользователя 1С, у которого должна стоять галочка "Аутентификация токеном доступа"
	
	ТокенДоступа.ВремяСоздания = ТекущаяУниверсальнаяДата() - Дата(1970,1,1,0,0,0); 
	//ТокенДоступа.ВремяСоздания = Окр(Дата(1,1,1,1,0,0) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000 - Дата(1970,1,1,1,0,0)); // в примерах от 1С ляп, токен создается в Москве на 3 часа в будущем и сразу не работает из-за использованнного способа получения timestamp
	ТокенДоступа.ВремяЖизни = 3600+24;
	ТокенДоступа.Идентификатор = Новый УникальныйИдентификатор;
	
//	ТокенДоступа.ПолезнаяНагрузка.Вставить("nbf",ТокенДоступа.ПолезнаяНагрузка.Вставить("nbf",));
	
	ТокенДоступа.Подписать(АлгоритмПодписи, КлючПодписи); //КлючПодписи = "0KHQuNC60YDQtdGC0L3Ri9C5INC60LvRjtGH0Yw=";
	
	ТекстТокена = Строка(ТокенДоступа); // получим токен строкой
	
	ОбкКонтрагент = текКонтрагент.ПолучитьОбъект();
	ОбкКонтрагент.Токен = ТекстТокена;
	ОбкКонтрагент.ВремяФормированияТокена = ТекущаяДата();
	ОбкКонтрагент.Записать();
	//получитьТекстДляНастройкиВебКлиента();
	
	
	
	ответ.accessToken = ТекстТокена;
	//ответ.accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhYTJjNjBmZC1iZTMzLTQzNjAtOWEwZC04MDJiMjcyYzE0NjciLCJleHAiOjE3MzQ1NDA4MTEsImF1ZCI6ImtzYXBpIiwic3ViIjoiaHR0cGxsa2hAZ21haWwuY29tIiwibmJmIjoxNzM0NTQwODExLCJpYXQiOjE3MzE5NDg4MTEsImlzcyI6InNzbCJ9.OeYkpjjqL10M8o8zI4SeBxEH0Z8aaWbuKlJREIFfaGY";
	
	Возврат Ответ;
	
КонецФункции
  
Функция ЗаписатьХранилищеВСтроку(Тбл)
	
	Стк = Новый структура();
	Для а=1 по ТБл.Колонки.Количество() Цикл
		Кол = ТБл.Колонки[а-1];
		
		Если Найти(Кол.Имя,"GUID") <> 0 Тогда
			п = Кол.Имя;
			Кол.Имя = п+"1";
			ТБл.Колонки.Добавить(п,Новый ОписаниеТипов("Строка"));
			Стк.Вставить(п+"1",п);
		КонецЕСЛИ;
		
	КонеццИклА;
	
	Если Стк.Количество()<>0 Тогда
		Для каждого Стр из ТБл Цикл
			Для каждого эл из Стк Цикл
				Если ЗначениеЗаполнено(Стр[эл.Ключ])=ЛОжь ТОгда
					Стр[эл.Значение] = "00000000-0000-0000-0000-000000000000";
				ИНАче
					Стр[эл.Значение] = СокрЛП(Стр[эл.Ключ].УникальныйИдентификатор());
				КонецЕсли;
			Конеццикла;
		КонецЦикла;
		
		Для каждого эл из Стк Цикл
			Тбл.Колонки.Удалить(эл.Ключ);
		Конеццикла;
	КонецЕсли;
	
	
	
	
	хр = Новый ХранилищеЗначения(ТБл,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции    
//=======================================================
Функция ТблВМасСтк(Тбл)
	
	Рез = новый Массив;
	
	сткСтр = "";
	Для каждого Кол из ТБл.Колонки Цикл
		СткСтр = СткСтр+","+Кол.Имя;
	КонецЦикла;
	СткСтр = Сред(СткСтр,2);
	
	Для каждого Стр из Тбл Цикл
		Стк = Новый Структура(СткСтр);
		ЗаполнитьЗначенияСвойств(Стк,Стр);
		Рез.Добавить(Стк);
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции
//=======================================================

Функция ПроверкаРегистрации(Токен,кодВозврата)
	
	Запрос = новый Запрос;   
	Запрос.УстановитьПараметр("Токен",ТОкен);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Токен = &Токен";
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.ссылка;
	ИНаче
		кодВозврата = 403;
		Возврат Неопределено;
	КонецеслИ;
	
	
	
КонецФункции


Функция ПолучитьТС(текКА)

	Запрос = новый Запрос; 
	Запрос.УстановитьПараметр("текКА",текКА);
	
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТСЗаказчика.ссылка) КАК гуид,
	               |	ТСЗаказчика.Код КАК gosnumber,
	               |	ТСЗаказчика.Наименование КАК name,
	               |	ТСЗаказчика.Масса КАК weight,
	               |	ТСЗаказчика.Активен КАК active
	               |ИЗ
	               |	Справочник.ТСЗаказчика КАК ТСЗаказчика
				   |ГДЕ Владелец = &текКА
				   |";
	
	ТБл = Запрос.Выполнить().Выгрузить();  
	тбл.Колонки.Добавить("GUID"); 
	Для каждого стр из ТБл Цикл
		Стр.guid = СокрЛП(Стр.гуид);
	КонецЦикла;                   
	Тбл.Колонки.Удалить("гуид");

	масТбл = ТблВМасСтк(Тбл);  
	Возврат масТбл;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписатьJSON(ЗаписьJSON, масТбл);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции   


Функция КорректировкаТС(текКА,сткДанные,кодВозврата)
	
	сс = Справочники.ТСЗаказчика.ПолучитьСсылку(Новый УникальныйИдентификатор(сткДанные.guid));
	Если стрНайти(сс,"не найден")<>0 Тогда
		кодВозврата = 406; 
		Возврат "Автомобиль не найден";
		
	КонецЕсли;;  
	
	обк = сс.ПолучитьОбъект();
	
	обк.Владелец = текКА;
	обк.Код = сткДанные.code;
	обк.Наименование = сткДанные.name;   
	Обк.Активен = сткДанные.active; 
	
	Если сткДанные.свойство("weight") Тогда 
		Если ЗначениеЗаполнено(сткДанные.weight) Тогда
			обк.масса = сткДанные.weight;                 
		КонецесЛИ;
	КонецеслИ;
	
	Попытка
		обк.Записать();
	Исключение                   
		кодВозврата = 406; 
		пСтр = ОписаниеОшибки();
		
		Возврат Сред(пСтр,СтрНайти(пСтр,"---"));
		
	КонецПопытки;
		
	Возврат Истина;
	
	
КонецФункции   

Функция ФорматДтИзСтроки(Зн)    //2024-12-23T21:00:00.000Z
	пЗн = СтрЗаменить(Зн,"T","-");
	пЗн = СтрЗаменить(пЗн,".","-");
	мас = СтрРазделить(пЗн,"-");
	Если Мас.Количество()<3 ТОгда Возврат Неопределено; КонецЕсли;  
	
	пСтр = Мас[0]+Мас[1]+Мас[2];
	Если СтрДлина(пСтр)<>8 ТОгда
		Возврат Неопределено ;
	Конецесли;
	
	Возврат Дата(пСтр); //Дата("20241101")
	
КонецФункции

Функция ПолучитьЖурналПроезда(текКА,сткДанные,кодВозврата,НуженФайл)
	
	
	Отч = Отчеты.ЖурналПроездаЧерезПереправу.Создать();  
	Если сткДанные.Свойство("dt1") Тогда
		дт = ФорматДтИзСтроки(сткДанные.dt1);    //2024-12-23T21:00:00.000Z
		дт1 = ФорматДтИзСтроки(сткДанные.dt2);  
	ИНаче
		дт = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),-6));
		дт1 = ТекущаяДата();  
	КонецЕсли;   
	
	
	
	Если дт=Неопределено или дт1 = Неопределено Тогда
		кодВозврата = 408;
		Возврат "Неправильный формат даты";
	Конецесли;
	
	отч.Дт = дт;
	отч.Дт1 = дт1;  
	отч.Контрагент = текКА;
	
	ТабДок = отч.Данные("","",Новый УникальныйИдентификатор,НуженФайл=ложь);
	
	
	Если НуженФайл Тогда
		Поток = Новый ПотокВПамяти;
		ТабДок.Записать(Поток, ТипФайлаТабличногоДокумента.XLSX);
		ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
		Возврат ДанныеФайла;
	Иначе    
		
		Если ТабДок.количество()>0 ТОгда  //итоговая строка
			ТабДок.Удалить(ТабДок.количество()-1);
		КонецеслИ; 
		
		//ТабДок.Колонки.Удалить("Контрагент");
		//ТабДок.Колонки.Удалить("ТС");
		//ТабДок.Колонки.Удалить("ССылка");
		
		масТбл = ТблВМасСтк(ТабДок);  
		Возврат масТбл;
		
	КонецеслИ;
	
	
КонецФункции   


Функция ИзменениеПароля(текКА,сткДанные,кодВозврата)
	
	
	Обк = текКА.ПолучитьОбъект();
	обк.Пароль =  сткДанные.password;
	обк.Записать();
	
	Возврат получитьТокен(обк.емайл,  обк.Пароль);
	
	
КонецФункции   

Функция ВосстановлениеПароля(сткДанные,кодВозврата)
	
	ссКА = Справочники.Контрагенты.НайтиКонтрагентаПоLink(сткДанные.link); 
	Если ссКА = Неопределено Тогда
		 кодВозврата = 410;
		 Возврат "ссылка не найдена";
	КонецесЛИ;
	
	
	Обк = ссКА.ПолучитьОбъект();
	обк.Пароль =  сткДанные.password;
	обк.Записать();
	
	Возврат Истина;
	
	
КонецФункции   

Функция ОтправитьПочтуНаВосстановлениеПароля(сткДанные,кодВозврата)
	
	ссКА = Справочники.Контрагенты.НайтиКонтрагентаПоемайл(сткДанные.email); 
	Если ссКА = Неопределено Тогда
		 Возврат Истина;
	 КонецесЛИ;     
	 
	Документы.ЗаявкиНаРегистрацию.ОтправитьСообщениеОРегистрации(ссКА,Истина);	 
	 
	//Тема = "Восстановление пароля в сервисе переправа ЕТК ";
	//Текст = "Добрый день!
	//|                        
	//| В ответ на запрос восстановления пароля:
	//| Для восстановления пароля в сервисе переправы ЕТК "+Константы.АдресСервиса.Получить()+" перейдите по следующей ссылке:
	//|
	//| "+сткДанные.link+"
	//|
	//| Если вы не вызывали восстановление пароля, проигнорируйте это сообщение.
	//|-----
	//|  Система автоматической рассылки.  
	//|";
	//
	//Получатель = ссКА.емайл;
	//
	//
	//Обк = ссКА.ПолучитьОбъект();
	//обк.ссылкаНаВосстановлениеПароля =  сткДанные.link;
	//обк.Записать();   
	//
	//
	//РегистрыСведений.ОчередьСообщенийОтправка.ЗаписатьВОчередь(Получатель,тема,текст);
	
	Возврат Истина;
	
	
КонецФункции   


Процедура ЗаполнитьЗаголовки(Запрос, Ответ)
	
	Origin = Запрос.Заголовки.Получить("Origin");
	Если Origin = Неопределено Тогда
		Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", "*");
	Иначе
		Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", Origin);
	КонецЕсли;	
	Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", "Authorization,Content-type, Accept");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Methods", "GET, POST, PUT");// и какие там еще есть методы у данного шаблона запроса
	
КонецПроцедуры

Функция ПолучитьСчет(текКА,сткДанные)    
	
	Обр = Обработки.МакетСчета.Создать();
	обр.Сумма = сткДанные.summa;
	обр.Контрагент = текКА;
	ТабДок = Обр.ПЕчать();

	//ТабДок = Новый ТабличныйДокумент;   
	//ТабДок.Область(1,1,1,1).Текст = "ТЕСТ "+ТекущаяДата();
	// какое-то заполнение табличного документа
	Поток = Новый ПотокВПамяти;
	ТабДок.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДанныеФайла;
	
КонецФункции   

Функция ПолучитьАктСверки(текКА,сткДанные)    
	
	ТабДок = Новый ТабличныйДокумент;   
	ТабДок.Область(1,1,1,1).Текст = "Формирование акта сверки находится в разработке "+ТекущаяДата();
	// какое-то заполнение табличного документа
	Поток = Новый ПотокВПамяти;
	ТабДок.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДанныеФайла;
	
КонецФункции   

Функция ПОлучитьНовости()
	
	Запрос = новый Запрос;
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Новости.ссылка) КАК гуид,
	               |	Новости.Наименование КАК Headline,
	               |	Новости.Дата КАК Дт,
	               |	Новости.ТекстНовостей КАК txt
	               |ИЗ
	               |	Справочник.Новости КАК Новости";
	
	ТБл = Запрос.Выполнить().Выгрузить();    
	
	тбл.Колонки.Добавить("GUID"); 
	тбл.Колонки.Добавить("dt"); 
	Для каждого стр из ТБл Цикл
		Стр.guid = СокрЛП(Стр.гуид);
		Стр.dt = Формат(Стр.дт,"ДФ='dd MMMM yyyy ''г.'''");
	КонецЦикла;                   
	Тбл.Колонки.Удалить("гуид");
	Тбл.Колонки.Удалить("дт");
	

	масТбл = ТблВМасСтк(Тбл);  
	Возврат масТбл;
	
КонецФункции

Функция ПолучитьБаланс(текКА)
	
	Возврат РегистрыНакопления.РасчетыЗаПроезд.ПолучитьСальдоПоКонтрагенту(текКА);
	
КонецФункции

Функция НоваяРегистрация(ДанныеЗапроса,Ответ)
	
	рез = Документы.ЗаявкиНаРегистрацию.НоваяРегистрация(ДанныеЗапроса); 
	
	Если Рез<> Истина Тогда
		Ответ.КодСостояния = 304;		
	КонецеслИ;
	
	Возврат Рез;
	
КонецФункции      

Функция ДобавитьТС(текКА,сткДанные,кодВозврата)
	
	текКод = Справочники.ТСЗаказчика.фрмГосНомер(сткДанные.code);
	
	Запрос = Новый Запрос;   
	Запрос.УстановитьПараметр("Владелец",текКА);
	Запрос.УстановитьПараметр("Код",текКод);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ТСЗаказчика.Ссылка КАК Ссылка
	              |ИЗ
	              |	Справочник.ТСЗаказчика КАК ТСЗаказчика
	              |ГДЕ
	              |	ТСЗаказчика.Код = &Код
	              |	И ТСЗаказчика.Владелец = &Владелец" ;
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		кодВозврата = 406;
		Возврат "Есть такой автомобиль";
	КонецеслИ;
	
	Обк= Справочники.ТСЗаказчика.СоздатьЭлемент(); 
	обк.Владелец = текКА;
	обк.Код = текКод;
	обк.Наименование = сткДанные.name;   
	Обк.Активен = сткДанные.active;  
	
	Если сткДанные.свойство("weight") Тогда 
		Если ЗначениеЗаполнено(сткДанные.weight) Тогда
			обк.масса = сткДанные.weight;                 
		КонецесЛИ;
	КонецеслИ;
	
	обк.Записать();
		
	Возврат Истина;
	
КонецФункции



Функция GETGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);      
	ЗаполнитьЗаголовки(Запрос, Ответ);
	Метод = ВРЕГ(Запрос.ПараметрыURL["ИмяМетода"]);
	
	
	CookieСтр = Запрос.Заголовки.Получить("cookie");
	ТелоЗапроса  = Запрос.ПолучитьТелоКакСтроку();

	Если CookieСтр<>Неопределено Тогда
		Cookie = ПолучитьCookie(CookieСтр);
	Иначе
		Cookie = Новый Соответствие();
	КонецЕсли; 
	
	текКА = Неопределено;
	Если ТелоЗапроса<>"" Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();    
		
		Если ДанныеЗапроса.Свойство("AUTH") Тогда
			текКА = ПроверкаРегистрации(ДанныеЗапроса.AUTH,Ответ.КодСостояния);  
		КонецеслИ;  
		
		Если ТекКА = Неопределено 
			и метод <> "AUTH" 
			и метод <> "TEST" 
			и метод <> "NEWREG" 
			и метод <> "PASSRECOVERY" 
			и метод <> "SENDPASSRECOVERY" 
		Тогда
			Возврат Ответ;
		КонецЕслИ;
		
	КонецЕСЛИ;
	
	ТипЗапроса = Запрос.ПараметрыЗапроса.Получить("typerequest");
	
	СткПар = Новый Структура;
	Для каждого Эл из Запрос.ПараметрыЗапроса Цикл
		СткПар.Вставить(Эл.Ключ,Эл.Значение);	
	КонецЦикла;
	


	ЕСли Метод = "TEST" ТОгда
		//Результат = СтрокаСоединенияИнформационнойБазы();
		////ИначеЕСли Метод = "REGPLANFACTDDS" ТОгда
		////	Результат = РегПланФакт(Запрос.ПолучитьТелоКакСтроку());	
		//Ответ.УстановитьТелоИзСтроки(Результат);
		//Возврат Ответ; 
		
		ДанныеОтвета = Новый Массив;
		ДанныеОтвета.Добавить(СтрокаСоединенияИнформационнойБазы());
		ДанныеОтвета.Добавить("AUTH - авторизация");
		ДанныеОтвета.Добавить("GETTS - Получить список ТС");
		ДанныеОтвета.Добавить("CORTS - корректировка данных ТС");
		ДанныеОтвета.Добавить("NEWREG - Заявка на регистрацию ");
		
	ИначеЕсли  Метод = "AUTH" Тогда		
		
		ДанныеОтвета = получитьТокен(ДанныеЗапроса.email,  ДанныеЗапроса.password);		
		//ДанныеОтвета = получитьТокен("nvds@mail.ru",1234567);		
		
		
	ИначеЕсли ТипЗапроса = ВРЕГ("refreshToken") Тогда 
		
		ДанныеОтвета = Авторизация.ПолучитьТокен(Cookie.Получить("refreshToken"));			
		Если ЗначениеЗаполнено(ДанныеОтвета.error) Тогда
			Ответ = Новый HTTPСервисОтвет(401);  
			ЗаполнитьЗаголовки(Запрос, Ответ);

		КонецЕсли;    
		refreshToken = "";
		Если ДанныеОтвета.Свойство("refreshToken", refreshToken) Тогда
			Ответ.Заголовки.Вставить("Set-Cookie","refreshToken='" + refreshToken + "'; HttpOnly");
		КонецЕсли; 
		
	ИначеЕсли  Метод = "NEWTS" Тогда		
		
		ДанныеОтвета = ДобавитьТС(текКА,ДанныеЗапроса,Ответ.КодСостояния);
		
		
	ИначеЕсли  Метод = "GETTS" Тогда		
		
		ДанныеОтвета = получитьТС(текКА);
		
		
	ИначеЕсли  Метод = "CORTS" Тогда		
		
		ДанныеОтвета = КорректировкаТС(текКА,ДанныеЗапроса,Ответ.КодСостояния);
		
	ИначеЕсли  Метод = "CORPASS" Тогда		
		
		ДанныеОтвета = ИзменениеПароля(текКА,ДанныеЗапроса,Ответ.КодСостояния);
		
	ИначеЕсли  Метод = "PASSRECOVERY" Тогда		
		
		ДанныеОтвета = ВосстановлениеПароля(ДанныеЗапроса,Ответ.КодСостояния);
		
	ИначеЕсли  Метод = "SENDPASSRECOVERY" Тогда		
		
		ДанныеОтвета = ОтправитьПочтуНаВосстановлениеПароля(ДанныеЗапроса,Ответ.КодСостояния);
		
	ИначеЕсли  Метод = "NEWREG" Тогда	//{"email":"email@mail.ru","inn":"888989898","kpp":"8948394","name":"ООО что-что","fio":"Иванов Иван Иванович","phonenumber":"89825435456"}	
		
		ДанныеОтвета = НоваяРегистрация(ДанныеЗапроса,Ответ);
	ИначеЕсли  Метод = "GETINVOICE" Тогда		
		
		ДанныеОтвета = ПолучитьСчет(текКА,ДанныеЗапроса);
		Ответ.УстановитьТелоИзДвоичныхДанных(ДанныеОтвета);
		Возврат Ответ;  
		
	ИначеЕсли  Метод = "GETAKTSVERKI" Тогда		
		
		ДанныеОтвета = ПолучитьАктСверки(текКА,ДанныеЗапроса);
		Ответ.УстановитьТелоИзДвоичныхДанных(ДанныеОтвета);
		Возврат Ответ;  
		
	ИначеЕсли  Метод = "GETNEWS" Тогда	
		
		ДанныеОтвета = ПолучитьНовости();
		
		
	ИначеЕсли  Метод = "GETBALANCE" Тогда	
		
		ДанныеОтвета = ПолучитьБаланс(текКА);
		
	ИначеЕсли  Метод = "GETEMAIL" Тогда	
		
		ДанныеОтвета = СокрлП(текКА.емайл);
		
	ИначеЕсли  Метод = "GETKA" Тогда	
		
		ДанныеОтвета = СокрлП(текКА);
		
	ИначеЕсли  Метод = "GETJURNALFILE" Тогда	
		
		ДанныеОтвета = ПолучитьЖурналПроезда(текКА,ДанныеЗапроса,Ответ.КодСостояния,Истина);
		Ответ.УстановитьТелоИзДвоичныхДанных(ДанныеОтвета);
		Возврат Ответ;  
		
	ИначеЕсли  Метод = "GETJURNAL" Тогда	
		
		ДанныеОтвета = ПолучитьЖурналПроезда(текКА,ДанныеЗапроса,Ответ.КодСостояния,Ложь);
		
	ИНаче
		Ответ.КодСостояния = 404;
		Результат = "Метод "+Метод+" не обнаружен";
	КонецеСли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета); 
	ДанныеJSON = ЗаписьJSON.Закрыть();
	
	Ответ.Заголовки.Вставить("Content-Type","text/text; charset=UTF-8");
	Ответ.Заголовки.Вставить("Content-Type","application/json");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", "Authorization,Content-type, Accept");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Methods", "GET, POST, PUT");// и какие там еще есть методы у данного шаблона запроса

	
	Origin = Запрос.Заголовки.Получить("Origin");
	Если Origin = Неопределено Тогда
		Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", "*");
	Иначе
		Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", Origin);
	КонецЕсли;	
	
	
	Ответ.УстановитьТелоИзСтроки(ДанныеJSON);
	Возврат Ответ;
	
КонецФункции

Функция GETPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции    


Функция ПолучитьCookie(стрCookies)
	
	Массив = СтрРазделить(стрCookies, ";",Истина);
	Результат  = Новый Соответствие();
	Для Каждого Элемент ИЗ Массив Цикл	
		КлючЗначение = StrSplit(Элемент, "=");
		Ключ = СокрЛП(КлючЗначение[0]);
		Значение = СтрЗаменить(СокрЛП(КлючЗначение[1]), "'", "");
		Результат.Вставить(Ключ, Значение);
	Конеццикла;
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаЗапроса(Запрос, Ответ)
    // Проверка на предзапрос (preflight request)
    Если Запрос.Метод = "OPTIONS" Тогда
        // Добавляем CORS-заголовки
        Ответ.УстановитьЗаголовок("Access-Control-Allow-Origin", "*"); // Или укажите конкретный домен вместо *
        Ответ.УстановитьЗаголовок("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        Ответ.УстановитьЗаголовок("Access-Control-Allow-Headers", "Content-Type, Authorization");
        Ответ.УстановитьЗаголовок("Access-Control-Max-Age", "86400"); // Кеширование CORS-политики на 1 день
        Ответ.Код = 204; // Без содержания
        Возврат;
	КонецЕсли;  
КонецПроцедуры

Функция GETOPTIONS(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);  
	ЗаполнитьЗаголовки(Запрос, Ответ);
	//Ответ.УстановитьЗаголовок("Access-Control-Allow-Origin", "*"); // Или укажите конкретный домен вместо *
	//Ответ.УстановитьЗаголовок("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
	//Ответ.УстановитьЗаголовок("Access-Control-Allow-Headers", "Content-Type, Authorization");
	//Ответ.УстановитьЗаголовок("Access-Control-Max-Age", "86400"); // Кеширование CORS-политики на 1 день
	Ответ.КодСостояния = 204; // Без содержания
	Возврат Ответ;
КонецФункции  

//1. Добавить / корректировать ТС
//2. Получить реестр
//3. Получить счет

